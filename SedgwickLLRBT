// This is Jackson's translation of all of the code in Sedgwwick's paper into C++.
// The fact that there are errors concerning undeclared identifiers proves that Sedgewick's code is incomplete.
// isRed(Node* h) is an example of a method that wasn't defined, but was explained in the paper.
// min and fixUp(Node* h) were neither defined nor explained.


class LLRB {
public:

    void remove(int key) {
        root = removeNode(root, key);
        root->color = black;
    }

private:

    typedef struct Node {
        int key;
        int value;
        bool color;
        Node *left, *right;
    } Node;

    Node* root;

    LLRB() { root = nullptr; }

    bool red = true;
    bool black = false;

    static bool isRed(Node* h) {
        return h != nullptr and h->color;
    }

    Node* createNode(int key, int value) const {
        Node *h = new Node();
        h->key = key;
        h->value = value;
        h->color = red;
        return h;
}

    Node* search(int key) {
        Node *x = root;
        while (x != nullptr) {
            if (key == x->key) return x;
            if (key < x->key) x = x->left;
            if (key > x->key) x = x->right;
        }
        return nullptr;
    }

    Node* insert(Node* h, int key, int value) {
        if (h == nullptr) return createNode(key, value);
        if (isRed(h->left) and isRed(h->right)) colorFlip(h);
        if (key == h->key) h->value = value;
        else if (key < h->key) h->left = insert(h->left, key, value);
        else h->right = insert(h->right, key, value);
        if (isRed(h->right) and !isRed(h->left)) h = rotateLeft(h);
        if (isRed(h->left) and isRed(h->left->left)) h = rotateRight(h);
        return h;
    }

    void deleteMin() {
        root = deleteMin(root);
        root->color = black;
    }

    Node* deleteMin(Node* h) {
        if (h->left == nullptr) return nullptr;
        if (!isRed(h->left) and !isRed(h->left->left)) h = moveRedLeft(h);
        h->left = deleteMin(h->left);
        return fixUp(h);
    }

    Node* rotateLeft(Node* h) const {
        Node* x = h->right;
        h->right = x->left;
        x->left = h;
        x->color = h->color;
        h->color = red;
        return x;
    }

    Node* rotateRight(Node* h) const {
        Node* x = h->left;
        h->left = x->right;
        x->right = h;
        x->color = h->color;
        h->color = red;
        return x;
    }

    static void colorFlip(Node* h) {
        h->color = !h->color;
        h->left->color = !h->left->color;
        h->right->color = !h->right->color;
    }

    Node* moveRedLeft(Node* h) {
        colorFlip(h);
        if (isRed(h->right->left)) {
            h->right = rotateRight(h->right);
            h = rotateLeft(h);
            colorFlip(h);
        }
        return h;
    }

    Node* moveRedRight(Node* h) {
        colorFlip(h);
        if (isRed(h->left->left)) {
            h = rotateRight(h);
            colorFlip(h);
        }
        return h;
    }

    Node* removeNode(Node* h, int key) {
        if (key < h->key) {
            if (!isRed(h->left) and !isRed(h->left->left)) h = moveRedLeft(h);
            h->left = removeNode(h->left, key);
        } else {
            if (isRed(h->left)) h = rotateRight(h);
            if (key == h->key and h->right == nullptr) return nullptr;
            if (!isRed(h->right) and !isRed(h->right->left)) h = moveRedRight(h);
            if (key == h->key) {
                h->value = get(h->right, min(h->right)->key);
                h->key = min(h->right)->key;
                h->right = deleteMin(h->right);
            } else {
                h->right = removeNode(h->right, key);
            }
        }
        return fixUp(h);
    }
};
