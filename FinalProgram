#include <iostream>
#include <vector>
#include <iterator>
using namespace std;

class LLRBBST {

public:

    LLRBBST() { root = nullptr; }
    
    int searchElement(int thing) {
        Node* myNode = search(thing);
        return myNode->thing;
    }
    
    int searchCount(int thing) {
        Node* myNode = search(thing);
        return myNode->numDuplicates + 1;
    }

    void insert(int thing) {
        root = insert(root, thing);
        root->color = false;
    }

    void print(vector<string> &words) {
        string output = "digraph {\n    node [style=filled,fontcolor=white,fillcolor=black]\n";
        if (!printIsSpecial(words, output)) {
            bool hasReds = false;
            generateDOTColors(root, words, output, hasReds);
            if (hasReds) {
                output.pop_back();
                output += " [fillcolor=red]\n";
            }
            generateDOTFile(root, words,output);
        }
        output += "}\n";
        cout << output;
    }

private:

    Node* search(int thing) {
        Node **current = &root;
        while (*current) {
            if (thing < (*current)->thing) current = &(*current)->left;
            else if (thing > (*current)->thing) current = &(*current)->right;
            else return *current;
        }
        return nullptr;
    }

    typedef struct Node {
        int thing, numDuplicates;
        bool color;
        struct Node *left, *right;
    } Node;

    Node *root;

    static Node* createNode(int thing) {
        Node *myNode = new Node();
        myNode->thing = thing;
        myNode->numDuplicates = 0;
        myNode->color = true;
        myNode->left = myNode->right = nullptr;
        return myNode;
    }

    static Node* rotateLeft(Node* myNode) {
        Node *child = myNode->right;
        Node *childLeft = child->left;
        child->left = myNode;
        myNode->right = childLeft;
        return child;
    }

    static Node* rotateRight(Node* myNode) {
        Node *child = myNode->left;
        Node *childRight =  child->right;
        child->right = myNode;
        myNode->left = childRight;
        return child;
    }

    static int isRed(Node *myNode) {
        return myNode == nullptr ? 0 : myNode->color;
    }

    static void swapColors(Node *node1, Node *node2) {
        bool temp = node1->color;
        node1->color = node2->color;
        node2->color = temp;
    }

    Node* insert(Node* myNode, int thing) {
        if (myNode == nullptr) return createNode(thing);
        if (thing < myNode->thing) myNode->left = insert(myNode->left, thing);
        else if (thing > myNode->thing) myNode->right = insert(myNode->right, thing);
        else { myNode->numDuplicates++; return myNode; }

        if (isRed(myNode->right) && !isRed(myNode->left)) {
            myNode = rotateLeft(myNode);
            swapColors(myNode, myNode->left);
        }
        if (isRed(myNode->left) && isRed(myNode->left->left)) {
            myNode = rotateRight(myNode);
            swapColors(myNode, myNode->right);
        }
        if (isRed(myNode->left) && isRed(myNode->right)) {
            myNode->color = !myNode->color;
            myNode->left->color = false;
            myNode->right->color = false;
        }
        return myNode;
    }

    void generateDOTColors(Node* myNode, vector<string> &words, string &output, bool &hasReds) {
        if (myNode->color) {
            if (!hasReds) output += "    ";
            hasReds = true;
            output += words[myNode->thing] + ",";
        }
        bool noLeft = myNode->left == nullptr, noRight = myNode->right == nullptr;
        if (noLeft) {
            if (!noRight) {
                generateDOTColors(myNode->right, words, output, hasReds);
            }
        } else {
            if (noRight) {
                generateDOTColors(myNode->left, words, output, hasReds);
            } else {
                generateDOTColors(myNode->left, words, output, hasReds);
                generateDOTColors(myNode->right, words, output, hasReds);
            }
        }
    }

    bool printIsSpecial(vector<string> &words, string &output) {
        if (root == nullptr) return true;
        if (root->left == nullptr and root->right == nullptr) {
            output += "    " + words[root->thing] + "\n";
            return true;
        }
        return false;
    }

    void generateDOTFile(Node* myNode, vector<string> &words, string &output) {
        bool noLeft = myNode->left == nullptr, noRight = myNode->right == nullptr;
        if (noLeft and noRight) return;
        output += "    " + words[myNode->thing] + " -> ";
        if (noLeft) {
            if (!noRight) {
                output += words[myNode->right->thing] + "\n";
                generateDOTFile(myNode->right, words, output);
            }
        } else {
            if (noRight) {
                output += words[myNode->left->thing] + "\n";
                generateDOTFile(myNode->left, words, output);
            } else {
                output += "{" + words[myNode->left->thing] + ", " + words[myNode->right->thing] + "}\n";
                generateDOTFile(myNode->left, words, output);
                generateDOTFile(myNode->right, words, output);
            }
        }
    }
};

int main() {
    string input;
    getline(cin, input);
    input.push_back(' ');
    vector<string> words;
    string word;
    LLRBBST tree = LLRBBST();
    int element = 0;
    for (auto c: input) {
        if (c == ' ') {
            if (!word.empty()) {
                tree.insert(element);
                element++;
                words.push_back(word);
                word.clear();
            }
        } else {
            word.push_back(c);
        }
    }
    tree.print(words);
    cout << endl << "What would you like to search for?" << endl;
    getline(cin, input);
    int sWord = words[tree.searchElement(input)];
    int sCount = tree.searchCount(input);
    cout << "word:  " << sWord << endl;
    cout << "count: " << sCount << endl;
}
